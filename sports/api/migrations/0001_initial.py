# Generated by Django 3.1.2 on 2020-10-02 12:11

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Addresses',
            fields=[
                ('address_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('language', models.CharField(default='', max_length=200)),
                ('suite', models.IntegerField()),
                ('floor', models.IntegerField()),
                ('building', models.IntegerField()),
                ('street_number', models.IntegerField()),
                ('street_prefix', models.CharField(default='', max_length=50)),
                ('street', models.CharField(default='', max_length=250)),
                ('street_suffix', models.CharField(default='', max_length=50)),
                ('neighborhood', models.CharField(default='', max_length=250)),
                ('district', models.CharField(default='', max_length=250)),
                ('locality', models.CharField(default='', max_length=250)),
                ('county', models.CharField(default='', max_length=250)),
                ('region', models.CharField(default='', max_length=250)),
                ('postal_code', models.CharField(default='', max_length=100)),
                ('country', models.CharField(default='', max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Affiliations',
            fields=[
                ('affiliation_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('affiliation_type', models.CharField(default='', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Events',
            fields=[
                ('event_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_key', models.CharField(default='', max_length=250)),
                ('start_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField()),
                ('site_alignment', models.CharField(choices=[('HOME_TEAM', 'Home Team'), ('NEUTRAL', 'Neutral')], default='HOME_TEAM', max_length=50)),
                ('event_status', models.CharField(choices=[('PRE_EVENT', 'pre-event'), ('MID_EVENT', 'mid-event'), ('POST_EVENT', 'post-event'), ('POSTPONED_EVENT', 'postponed'), ('CANCELLED_EVENT', 'cancelled')], default='PRE_EVENT', max_length=50)),
                ('last_update', models.DateTimeField()),
                ('event_number', models.IntegerField()),
                ('round_number', models.IntegerField()),
                ('time_certainty', models.CharField(default='', max_length=250)),
                ('broadcast_listing', models.CharField(default='', max_length=250)),
                ('start_date_time_local', models.DateTimeField()),
                ('series_index', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='EventStates',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_id', models.CharField(default='', max_length=250)),
                ('current_state', models.CharField(default='', max_length=250)),
                ('period_value', models.CharField(default='', max_length=200)),
                ('period_time_elapsed', models.CharField(default='', max_length=100)),
                ('period_time_remaining', models.CharField(default='', max_length=100)),
                ('minutes_elapsed', models.CharField(default='', max_length=10)),
                ('period_minutes_elapsed', models.CharField(default='', max_length=10)),
                ('context', models.CharField(default='', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='League',
            fields=[
                ('league_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Locations',
            fields=[
                ('location_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('city', models.CharField(default='', max_length=250)),
                ('state', models.CharField(default='', max_length=250)),
                ('area', models.CharField(default='', max_length=250)),
                ('country', models.CharField(default='', max_length=250)),
                ('timezone', models.CharField(default='', max_length=100)),
                ('latitude', models.CharField(default='', max_length=200)),
                ('longitude', models.CharField(default='', max_length=200)),
                ('country_code', models.CharField(default='', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='OutcomeTotals',
            fields=[
                ('outcome_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rank', models.IntegerField()),
                ('wins', models.IntegerField()),
                ('losses', models.IntegerField()),
                ('ties', models.IntegerField()),
                ('wins_overtime', models.IntegerField()),
                ('losses_overtime', models.IntegerField()),
                ('undecideds', models.IntegerField()),
                ('winning_percentage', models.FloatField()),
                ('points_scored_for', models.IntegerField()),
                ('points_scored_against', models.IntegerField()),
                ('points_difference', models.IntegerField()),
                ('standing_points', models.IntegerField()),
                ('events_played', models.IntegerField()),
                ('games_back', models.IntegerField()),
                ('sets_against', models.IntegerField()),
                ('sets_for', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='ParticipantsEvents',
            fields=[
                ('participant_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('participant_type', models.CharField(choices=[('TEAM', 'Team'), ('PLAYER', 'Player')], default='TEAM', max_length=100)),
                ('alignment', models.CharField(choices=[('HOME_TEAM', 'Home Team'), ('GUEST_TEAM', 'Guest Team')], default='HOME_TEAM', max_length=100)),
                ('score', models.FloatField()),
                ('event_outcome', models.CharField(default='', max_length=250)),
                ('rank', models.FloatField()),
                ('result_effect', models.CharField(default='', max_length=250)),
                ('score_attempts', models.IntegerField()),
                ('sort_order', models.CharField(default='', max_length=10)),
                ('score_type', models.CharField(choices=[('GOL', 'Gol'), ('KOS', 'Kos')], default='GOL', max_length=200)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.events')),
            ],
        ),
        migrations.CreateModel(
            name='Seasons',
            fields=[
                ('season_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField()),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.league')),
            ],
        ),
        migrations.CreateModel(
            name='Sites',
            fields=[
                ('sites_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('site_key', models.CharField(default='', max_length=200)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.locations')),
            ],
        ),
        migrations.CreateModel(
            name='WeatherConditions',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('temperature', models.FloatField()),
                ('temperature_unit', models.CharField(choices=[('C', 'Celsius'), ('F', 'Fahrenheit')], default='C', max_length=30)),
                ('humidity', models.FloatField()),
                ('clouds', models.BooleanField()),
                ('wind_direction', models.CharField(default='', max_length=20)),
                ('wind_velocity', models.FloatField()),
                ('weather_code', models.CharField(default='', max_length=30)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.events')),
            ],
        ),
        migrations.CreateModel(
            name='Teams',
            fields=[
                ('team_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('team_key', models.CharField(default='', max_length=100)),
                ('home_site_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.sites')),
            ],
        ),
        migrations.CreateModel(
            name='TeamPhases',
            fields=[
                ('team_phases_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField()),
                ('affiliation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.affiliations')),
                ('end_season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='end_season_team_phases', to='api.seasons')),
                ('start_season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='start_season_team_phases', to='api.seasons')),
            ],
        ),
        migrations.CreateModel(
            name='Rankings',
            fields=[
                ('ranking_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('issuer', models.CharField(default='', max_length=250)),
                ('ranking_value', models.FloatField()),
                ('ranking_value_previous', models.FloatField()),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.teams')),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('position_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('abbreviation', models.CharField(default='', max_length=100)),
                ('affiliation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.affiliations')),
            ],
        ),
        migrations.CreateModel(
            name='Persons',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('person_key', models.CharField(default='', max_length=200)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], default='M', max_length=15)),
                ('birth_date', models.DateField()),
                ('death_date', models.DateField()),
                ('birth_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='birth_loc', to='api.locations')),
                ('death_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='death_loc', to='api.locations')),
                ('final_resting_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.addresses')),
                ('hometown_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hometown_loc', to='api.locations')),
                ('residence_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='residence_loc', to='api.locations')),
            ],
        ),
        migrations.CreateModel(
            name='PersonPhases',
            fields=[
                ('person_phases_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('uniform_number', models.IntegerField()),
                ('height', models.FloatField()),
                ('weight', models.FloatField()),
                ('start_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField()),
                ('entry_reason', models.CharField(default='', max_length=250)),
                ('exit_reason', models.CharField(default='', max_length=250)),
                ('duration', models.IntegerField()),
                ('end_season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='end_season', to='api.seasons')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.persons')),
                ('regular_position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.position')),
                ('start_season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='start_season', to='api.seasons')),
            ],
        ),
        migrations.CreateModel(
            name='PersonEventMetadata',
            fields=[
                ('person_event_metadata_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('health', models.CharField(default='', max_length=100)),
                ('weight', models.FloatField()),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.events')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.persons')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.position')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.teams')),
            ],
        ),
        migrations.CreateModel(
            name='Periods',
            fields=[
                ('period_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('period_value', models.CharField(default='', max_length=200)),
                ('score', models.IntegerField()),
                ('rank', models.IntegerField()),
                ('sub_score_key', models.IntegerField()),
                ('sub_score_type', models.CharField(default='', max_length=200)),
                ('sub_score_name', models.CharField(default='', max_length=200)),
                ('participant_event_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.participantsevents')),
            ],
        ),
        migrations.CreateModel(
            name='InjuryPhases',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('injury_status', models.CharField(choices=[('A', 'Active'), ('P', 'Past')], default='P', max_length=10)),
                ('injury_comment', models.CharField(default='', max_length=250)),
                ('start_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField()),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.persons')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.seasons')),
            ],
        ),
        migrations.AddField(
            model_name='events',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.sites'),
        ),
        migrations.CreateModel(
            name='EventActionPlays',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('play_type', models.CharField(default='', max_length=250)),
                ('play_result', models.CharField(default='', max_length=15)),
                ('event_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.eventstates')),
            ],
        ),
        migrations.CreateModel(
            name='EventActionPenalties',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('penalty_level', models.CharField(default='', max_length=100)),
                ('caution_level', models.CharField(default='', max_length=100)),
                ('event_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.eventstates')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.persons')),
            ],
        ),
        migrations.CreateModel(
            name='EventActionParticipants',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_action_play', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.eventactionplays')),
                ('event_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.eventstates')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.persons')),
            ],
        ),
        migrations.CreateModel(
            name='EventActionFouls',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('foul_name', models.CharField(default='', max_length=250)),
                ('foul_result', models.CharField(default='', max_length=250)),
                ('event_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.eventstates')),
                ('fouler', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fouler', to='api.persons')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipient', to='api.persons')),
            ],
        ),
        migrations.CreateModel(
            name='CoreStats',
            fields=[
                ('core_stats_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('score', models.IntegerField()),
                ('score_opposing', models.IntegerField()),
                ('score_attempts', models.IntegerField()),
                ('score_attempts_opposing', models.IntegerField()),
                ('score_percentage', models.FloatField()),
                ('score_percentage_opposing', models.FloatField()),
                ('time_played_event', models.FloatField()),
                ('time_played_total', models.FloatField()),
                ('time_played_event_average', models.FloatField()),
                ('events_played', models.IntegerField()),
                ('events_started', models.IntegerField()),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.position')),
            ],
        ),
        migrations.CreateModel(
            name='Awards',
            fields=[
                ('award_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=250)),
                ('total', models.FloatField()),
                ('rank', models.IntegerField()),
                ('award_value', models.FloatField()),
                ('currency', models.CharField(default='', max_length=20)),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.teams')),
            ],
        ),
        migrations.CreateModel(
            name='AffiliationEvents',
            fields=[
                ('affiliation_events_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('affiliation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.affiliations')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.events')),
            ],
        ),
        migrations.AddField(
            model_name='addresses',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.locations'),
        ),
    ]
